"""
Django settings for tdg_back project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: keep the secret key used in production secret!
SENTINEL_CLIENT_ID = config('SENTINEL_CLIENT_ID')
SENTINEL_CLIENT_SECRET = config('SENTINEL_CLIENT_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'authentication',
    'sentinel',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'storages',
]

SIDE_ID = 1

AUTH_USER_MODEL = 'authentication.CustomUser'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(config('ACCESS_TOKEN_LIFETIME'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=int(config('REFRESH_TOKEN_LIFETIME'))),
    'ROTATE_REFRESH_TOKENS': config('ROTATE_REFRESH_TOKENS'),
    'BLACKLIST_AFTER_ROTATION': config('BLACKLIST_AFTER_ROTATION'),

    'ALGORITHM': config('ALGORITHM'),
    'SIGNING_KEY': config('SIGNING_KEY'),
    'VERIFYING_KEY': config('VERIFYING_KEY'),

    'AUTH_HEADER_TYPES': (config('AUTH_HEADER_TYPES'),),
    'USER_ID_FIELD': config('USER_ID_FIELD'),
    'USER_ID_CLAIM': config('USER_ID_CLAIM'),

    'AUTH_TOKEN_CLASSES': (config('AUTH_TOKEN_CLASSES'),),
    'TOKEN_TYPE_CLAIM': config('TOKEN_TYPE_CLAIM'),

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': config('SLIDING_TOKEN_REFRESH_EXP_CLAIM'),
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=int(config('SLIDING_TOKEN_LIFETIME'))),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(minutes=int(config('SLIDING_TOKEN_REFRESH_LIFETIME'))),
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Add outros middlewares personalizados ou de terceiros aqui:
    'django.middleware.gzip.GZipMiddleware',
]

"""
Lista de origens (domínios) permitidos.
"""
CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT']
CORS_ALLOWED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000",]

ROOT_URLCONF = 'tdg_back.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tdg_back.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': config('DATABASES_ENGINE'),
        'NAME': config('DATABASES_NAME'),
        'HOST': config('DATABASES_HOST'),
        'PORT': config('DATABASES_PORT'),
        'USER': config('DATABASES_USER'),
        'PASSWORD': config('DATABASES_PASSWORD')
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


"""
Amazon S3 Image Bucket.
"""
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID') 
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY') 
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME') 
AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN') % AWS_STORAGE_BUCKET_NAME # Concatenação do AWS_S3_CUSTOM_DOMAIN + AWS_STORAGE_BUCKET_NAME.
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': config('AWS_S3_OBJECT_PARAMETERS')}
MEDIAFILES_LOCATION = config('MEDIAFILES_LOCATION')
DEFAULT_FILE_STORAGE = config('DEFAULT_FILE_STORAGE')


"""
Email.
"""
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')


"""
Configuração para arquivos de mídia (imagens, uploads).
"""
MEDIA_URL = '/media/'  # URL base para acessar os arquivos de mídia
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Caminho absoluto para a pasta de mídia

"""
Configuração para arquivos estáticos (CSS, JS, etc.).
"""
STATIC_URL = '/static/'  # URL base para acessar os arquivos estáticos
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Caminho absoluto para a pasta de arquivos estáticos

"""
Pode não exisitir ou ser vazia caso não precise de diretórios extras de arquivos estáticos durante o desenvolvimento.
"""
# STATICFILES_DIRS = []
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]